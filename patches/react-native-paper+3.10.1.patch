diff --git a/node_modules/react-native-paper/lib/commonjs/components/Avatar/AvatarImage.js b/node_modules/react-native-paper/lib/commonjs/components/Avatar/AvatarImage.js
index 36e6797..8a00e02 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/Avatar/AvatarImage.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/Avatar/AvatarImage.js
@@ -1,2 +1,2 @@
-"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2=_interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2=_interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2=_interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var React=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _theming=require("../../core/theming");var _jsxFileName="/Users/trensik/dev/react-native-paper/src/components/Avatar/AvatarImage.tsx";var defaultSize=64;var AvatarImage=function(_React$Component){(0,_inherits2.default)(AvatarImage,_React$Component);function AvatarImage(){(0,_classCallCheck2.default)(this,AvatarImage);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AvatarImage).apply(this,arguments));}(0,_createClass2.default)(AvatarImage,[{key:"render",value:function render(){var _this$props=this.props,_this$props$size=_this$props.size,size=_this$props$size===void 0?defaultSize:_this$props$size,source=_this$props.source,style=_this$props.style,theme=_this$props.theme,rest=(0,_objectWithoutProperties2.default)(_this$props,["size","source","style","theme"]);var colors=theme.colors;var _ref=_reactNative.StyleSheet.flatten(style)||{},_ref$backgroundColor=_ref.backgroundColor,backgroundColor=_ref$backgroundColor===void 0?colors.primary:_ref$backgroundColor;return React.createElement(_reactNative.View,(0,_extends2.default)({style:[{width:size,height:size,borderRadius:size/2,backgroundColor:backgroundColor},style]},rest,{__source:{fileName:_jsxFileName,lineNumber:65}}),React.createElement(_reactNative.Image,{source:source,style:{width:size,height:size,borderRadius:size/2},__source:{fileName:_jsxFileName,lineNumber:77}}));}}]);return AvatarImage;}(React.Component);(0,_defineProperty2.default)(AvatarImage,"displayName",'Avatar.Image');(0,_defineProperty2.default)(AvatarImage,"defaultProps",{size:defaultSize});var _default=(0,_theming.withTheme)(AvatarImage);exports.default=_default;
+"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2=_interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2=_interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2=_interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var React=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _theming=require("../../core/theming");var _jsxFileName="/Users/trensik/dev/react-native-paper/src/components/Avatar/AvatarImage.tsx";var defaultSize=64;var AvatarImage=function(_React$Component){(0,_inherits2.default)(AvatarImage,_React$Component);function AvatarImage(){(0,_classCallCheck2.default)(this,AvatarImage);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AvatarImage).apply(this,arguments));}(0,_createClass2.default)(AvatarImage,[{key:"render",value:function render(){var _this$props=this.props,_this$props$size=_this$props.size,size=_this$props$size===void 0?defaultSize:_this$props$size,source=_this$props.source,style=_this$props.style,theme=_this$props.theme,ImageComponent=_this$props.ImageComponent,rest=(0,_objectWithoutProperties2.default)(_this$props,["size","source","style","theme","ImageComponent"]);var colors=theme.colors;var ImageOverriden=ImageComponent||_reactNative.Image;var _ref=_reactNative.StyleSheet.flatten(style)||{},_ref$backgroundColor=_ref.backgroundColor,backgroundColor=_ref$backgroundColor===void 0?colors.primary:_ref$backgroundColor;return React.createElement(_reactNative.View,(0,_extends2.default)({style:[{width:size,height:size,borderRadius:size/2,backgroundColor:backgroundColor},style]},rest,{__source:{fileName:_jsxFileName,lineNumber:65}}),React.createElement(ImageOverriden,{source:source,style:{width:size,height:size,borderRadius:size/2},__source:{fileName:_jsxFileName,lineNumber:77}}));}}]);return AvatarImage;}(React.Component);(0,_defineProperty2.default)(AvatarImage,"displayName",'Avatar.Image');(0,_defineProperty2.default)(AvatarImage,"defaultProps",{size:defaultSize});var _default=(0,_theming.withTheme)(AvatarImage);exports.default=_default;
 //# sourceMappingURL=AvatarImage.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/typescript/src/components/Avatar/AvatarImage.d.ts b/node_modules/react-native-paper/lib/typescript/src/components/Avatar/AvatarImage.d.ts
index 89e5c90..4738f8b 100644
--- a/node_modules/react-native-paper/lib/typescript/src/components/Avatar/AvatarImage.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/src/components/Avatar/AvatarImage.d.ts
@@ -15,6 +15,11 @@ declare type Props = React.ComponentPropsWithRef<typeof View> & {
      * @optional
      */
     theme: Theme;
+    /**
+     * Override default image component. The default Image props are provided.
+     * @optional
+     */
+    ImageComponent?: React.ComponentType<any>;
 };
 /**
  * Avatars can be used to represent people in a graphical way.
@@ -42,7 +47,7 @@ declare class AvatarImage extends React.Component<Props> {
     };
     render(): JSX.Element;
 }
-declare const _default: (React.ComponentClass<Pick<Props, "ref" | "source" | "style" | "size" | "onLayout" | "testID" | "nativeID" | "accessible" | "accessibilityLabel" | "accessibilityRole" | "accessibilityStates" | "accessibilityHint" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "pointerEvents" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "accessibilityViewIsModal" | "accessibilityActions" | "onAccessibilityAction" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture"> & {
+declare const _default: (React.ComponentClass<Pick<Props, "ref" | "source" | "style" | "size" | "ImageComponent" | "onLayout" | "testID" | "nativeID" | "accessible" | "accessibilityLabel" | "accessibilityRole" | "accessibilityStates" | "accessibilityHint" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "pointerEvents" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "accessibilityViewIsModal" | "accessibilityActions" | "onAccessibilityAction" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<Theme> | undefined;
 }, any> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<(React.ComponentClass<Props, any> & typeof AvatarImage) | (React.FunctionComponent<Props> & typeof AvatarImage), {}>) | (React.FunctionComponent<Pick<Props, "ref" | "source" | "style" | "size" | "onLayout" | "testID" | "nativeID" | "accessible" | "accessibilityLabel" | "accessibilityRole" | "accessibilityStates" | "accessibilityHint" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "pointerEvents" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "accessibilityViewIsModal" | "accessibilityActions" | "onAccessibilityAction" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<Theme> | undefined;
