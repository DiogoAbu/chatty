{
  // Place your chatty workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  "use-input": {
    "scope": "typescript,typescriptreact",
    "prefix": "useInput",
    "body": ["const $1Input = useInput$2('');$0"],
    "description": "useInput"
  },
  "use-dimensions": {
    "scope": "typescript,typescriptreact",
    "prefix": "useDimensions",
    "body": ["const dimensions = useDimensions$1('$2');$0"],
    "description": "useDimensions"
  },
  "use-autorun": {
    "scope": "typescript,typescriptreact",
    "prefix": "useAutorun",
    "body": ["useAutorun$2(", "() => {", "  $0", "},", "{ name: '$1' },", "[],", ");", ""],
    "description": "useAutorun"
  },
  "use-press": {
    "scope": "typescript,typescriptreact",
    "prefix": "usePress",
    "body": ["const handle${1/(.*)/${1:/capitalize}/} = usePress$2(() => {", "  $0", "});", ""],
    "description": "usePress"
  },
  "use-theme": {
    "scope": "typescript,typescriptreact",
    "prefix": "useTheme",
    "body": ["const { $1 } = useTheme$0();", ""],
    "description": "useTheme"
  },
  "use-translation": {
    "scope": "typescript,typescriptreact",
    "prefix": "useTranslation",
    "body": ["const { t } = useTranslation$0();", ""],
    "description": "useTranslation"
  },
  "use-stores": {
    "scope": "typescript,typescriptreact",
    "prefix": "useStores",
    "body": ["const { $1 } = useStores$0();", ""],
    "description": "useStores"
  },
  "use-database": {
    "scope": "typescript,typescriptreact",
    "prefix": "useDatabase",
    "body": ["const database = useDatabase$0();", ""],
    "description": "useDatabase"
  },
  "use-navigation": {
    "scope": "typescript,typescriptreact",
    "prefix": "useNavigation",
    "body": ["const navigation = useNavigation$0();", ""],
    "description": "useNavigation"
  },
  "with-observables-imports": {
    "scope": "typescript,typescriptreact",
    "prefix": "withObservablesImports",
    "body": [
      "import withObservables from '@nozbe/with-observables';",
      "import { Observable } from 'rxjs/Observable';",
      "",
      "export interface With${1/(.*)/${1:/capitalize}/}Input {",
      "  ${1}: ${2:any};",
      "}",
      "export interface With${1/(.*)/${1:/capitalize}/}Output {",
      "  ${1}: Observable<${2:any}>;",
      "}",
      "export const with${1/(.*)/${1:/capitalize}/} = withObservables<With${1/(.*)/${1:/capitalize}/}Input, With${1/(.*)/${1:/capitalize}/}Output>(['${1}'], ({ ${1} }) => ({",
      "  ${1}: ${1}.observe(),${0}",
      "}));",
      ""
    ],
    "description": "withObservables"
  },
  "with-observables": {
    "scope": "typescript,typescriptreact",
    "prefix": "withObservables",
    "body": [
      "export interface With${1/(.*)/${1:/capitalize}/}Input {",
      "  ${1}: ${2:any};",
      "}",
      "export interface With${1/(.*)/${1:/capitalize}/}Output {",
      "  ${1}: Observable<${2:any}>;",
      "}",
      "export const with${1/(.*)/${1:/capitalize}/} = withObservables<With${1/(.*)/${1:/capitalize}/}Input, With${1/(.*)/${1:/capitalize}/}Output>(['${1}'], ({ ${1} }) => ({",
      "  ${1}: ${1}.observe(),${0}",
      "}));",
      ""
    ],
    "description": "withObservables"
  }
}
