name: Build Android

on:
  workflow_dispatch:
    inputs:
      checkoutRef:
        description: "Tag or SHA ref to checkout"
        required: false
        default: ""
  release:
    types:
      - published

env:
  node-version: "12.x"
  java-version: "1.8"

jobs:
  release:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: ${{ github.event.inputs.checkoutRef }}

      - name: Increase watchers to fix docker
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Get the version
        id: get-version
        run: echo ::set-output name=VERSION::$(node -pe "'v'+require('./package.json').version")

      - name: Decrypt release keystore
        run: |
          echo "$RELEASE_JKS" | base64 --decode > ./android/app/release.jks
          chmod 600 ./android/app/release.jks
        env:
          RELEASE_JKS: ${{ secrets.RELEASE_JKS }}

      - name: Decrypt google services
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./android/app/google-services.json
          chmod 600 ./android/app/google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}

      - name: Decrypt staging dotenv if version is pre-release
        if: "contains(steps.get-version.outputs.VERSION, '-')"
        run: |
          echo "$DOTENV_STAGING" | base64 --decode > ./.env
          chmod 600 ./.env
        env:
          DOTENV_STAGING: ${{ secrets.DOTENV_STAGING }}

      - name: Decrypt production dotenv
        if: "!contains(steps.get-version.outputs.VERSION, '-')"
        run: |
          echo "$DOTENV_PRODUCTION" | base64 --decode > ./.env
          chmod 600 ./.env
        env:
          DOTENV_PRODUCTION: ${{ secrets.DOTENV_PRODUCTION }}

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.java-version }}

      - name: Make Gradle executable
        run: chmod +x ./gradlew
        working-directory: ./android

      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.node-version }}

      - name: Get Yarn cache dir
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn dependencies
        uses: actions/cache@v1
        id: cache-yarn
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --prefer-offline --frozen-lockfile --silent

      - name: Generate APK
        run: ./gradlew assembleRelease --no-daemon
        working-directory: ./android
        env:
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

      - name: Upload APK to Release tagged with current version
        uses: AButler/upload-release-assets@v2.0
        with:
          files: "./android/app/build/outputs/apk/release/*.apk"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ steps.get-version.outputs.VERSION }}
